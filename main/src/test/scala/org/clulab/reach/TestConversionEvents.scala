package org.clulab.reach

import org.scalatest.{Matchers, FlatSpec}
import org.clulab.reach.mentions._
import TestUtils._

/**
 * Unit tests to ensure Activation event rules are matching correctly
 * User: johnbachman
 * Date: 5/26/17
 */
class TestConversionEvents extends FlatSpec with Matchers {
  val sent1a = "The initial stage is the conversion of β-D-galactose " +
              "to α-D-galactose by the enzyme, mutarotase (GALM)."
  val sent1b = "a high conversion of pyruvate to lactate."
  val sent1c = "In most organisms, the conversion of β-d-galactose to the " +
              "more metabolically useful glucose 1-phosphate is " +
              "accomplished by the action of four enzymes that constitute " +
              "the Leloir pathway."

  val sent2a = "Tumor cells often convert pyruvate to lactate."
  val sent2b = "Cancer cells, like normal cells, use glycolysis to " +
              "convert glucose to pyruvate."
  val sent2c = "To proceed in glycolysis the enzyme " +
              "6-phosphofructo-1-kinase (PFK-1) converts F-6-P to " +
              "fructose-1,6-bisphosphate (F-1,6-P2)."
  val sent2d = "Finally, UDP-galactose 4-epimerase recycles the " +
                "UDP-galactose to UDP-glucose for the transferase reaction."
  val sent2e = "Additionally, phosphoglucomutase converts the " +
               "D-glucose 1-phosphate to D-glucose 6-phosphate."

  val sent3a = "Warburg observed that in cancer cells pyruvate is converted " +
              "to lactate."
  val sent3b = "The glucose-1-phosphate generated by the Leloir pathway can " +
              "then be converted to glucose-6-phosphate by phosphoglucomutases."
  val sent3c = "In the first step of this pathway, β-d-galactose is " +
              "epimerized to α-d-galactose by galactose mutarotase."
  val sent3d = "To complete the pathway, UDP-galactose is converted to " +
               "UDP-glucose by UDP-galactose 4-epimerase."
  val sent3e = "Next, α-D-galactose is phosphorylated by galactokinase to " +
               "galactose 1-phosphate."

  val sent4a = "In the first step, galactose mutarotase facilitates the " +
               "conversion of β-D-galactose to α-D-galactose since this " +
               "is the active form in the pathway."

  sent1a should "contain conversion patterns" in {
    val mentions = getBioMentions(sent1a)
    mentions.filter(_.label == "Conversion") should have size (1)
  }
  sent1b should "contain conversion patterns" in {
    val mentions = getBioMentions(sent1b)
    mentions.filter(_.label == "Conversion") should have size (1)
  }
  sent1c should "contain conversion patterns" in {
    val mentions = getBioMentions(sent1c)
    mentions.filter(_.label == "Conversion") should have size (1)
  }

  sent2a should "contain convert_with_controller patterns" in {
    val mentions = getBioMentions(sent2a)
    mentions.filter(_.label == "Conversion") should have size (1)
  }
  sent2b should "contain convert_with_controller patterns" in {
    val mentions = getBioMentions(sent2b)
    mentions.filter(_.label == "Conversion") should have size (1)
  }
  sent2c should "contain convert_with_controller patterns" in {
    val mentions = getBioMentions(sent2c)
    mentions.filter(_.label == "Conversion") should have size (1)
  }
  sent2d should "contain convert_with_controller patterns" in {
    val mentions = getBioMentions(sent2d)
    mentions.filter(_.label == "Conversion") should have size (1)
  }
  sent2e should "contain convert_with_controller patterns" in {
    val mentions = getBioMentions(sent2e)
    mentions.filter(_.label == "Conversion") should have size (1)
  }

  sent3a should "contain convert_passive patterns" in {
    val mentions = getBioMentions(sent3a)
    mentions.filter(_.label == "Conversion") should have size (1)
  }
  sent3b should "contain convert_passive patterns" in {
    val mentions = getBioMentions(sent3b)
    mentions.filter(_.label == "Conversion") should have size (1)
  }
  sent3c should "contain convert_passive patterns" in {
    val mentions = getBioMentions(sent3c)
    mentions.filter(_.label == "Conversion") should have size (1)
  }
  sent3d should "contain convert_passive patterns" in {
    val mentions = getBioMentions(sent3d)
    mentions.filter(_.label == "Conversion") should have size (1)
  }
  sent3e should "contain convert_passive patterns" in {
    val mentions = getBioMentions(sent3e)
    mentions.filter(_.label == "Conversion") should have size (1)
  }

  sent4a should "contain catalyze_dobj patterns" in {
    val mentions = getBioMentions(sent4a)
    mentions.filter(_.label == "Conversion") should have size (1)
  }

}
